# Устанавливаем максимальную длину строки для кода
line-length = 120

# Включает нестабильные и находящиеся в предварительной версии правила
preview = true

src = ["src"]

[lint]
# Выбираем правила, которые должен применять линтер.
select = [
    "A",    # flake8-builtins | Выявления случаев, когда имена переменных, аргументов функций или атрибутов классов затеняют встроенные имена Python
    "ANN",  # flake8-annotations | Проверка заполненных аннотаций
    "ARG",  # flake8-unused-arguments | Выявление неиспользуемых аргументов в функциях, методах, классах, статических методах и лямбда-функциях
    "ASYNC",# flake8-async | Выявление ошибок с асинхронностью
    "B",    # flake8-bugbear | Находит общие ошибки и неоднозначности в коде
    "BLE",  # flake8-blind-except | Подсказывает, что отлавливать BaseException нельзя
    "C",    # flake8-comprehensions | Проверка стилевых ошибок, которые связаны с соглашениями кодирования convention messages
    "COM",  # flake8-commas | Проверка наличия запятой в конце строк
    "C4",   # flake8-comprehensions | Проверяет правильность и эффективность использования list, set, dict comprehensions
    "C90",  # mccabe | Проверка сложности функций
    "DTZ",  # flake8-datetimez | Выявление проблем использования объектов даты и времени без учета временных зон
    "E",    # pycodestyle errors |
    "ERA",  # eradicate | Проверяет наличие закомментированного кода
    "F",    # pyflakes | Ошибки, такие как неиспользуемые импорты и переменные
    "FBT",  # flake8-boolean-trap | Ошибки при использовании булевых типов в аннотации функций
    "FURB", # refurb | Выявление и предложение улучшений в коде, связанных с использованием более эффективных, чистых или современных практик программирования
    "I",    # isort | Правила для сортировки импортов
    "ICN",  # flake8-import-conventions | Соответствие имен при импорте согласно конвенции
    "ISC",  # flake8-implicit-str-concat | Проверяет использование неэффективной конкатенации строк
    "N",    # pep8-naming | Соблюдение соглашения о наименовании
    "PERF", # perflint | Правила, направленные на выявление потенциальных проблем с производительностью
    "RET",  # flake8-return | Ошибки return
    "PIE",  # flake8-pie |
    "PL",   # Pylint | Правила
    "RUF",  # Ruff | Мелочи от Ruff
    "SIM",  # flake8-simplify | Проверяет наличие ненужной вложенности нескольких последовательных менеджеров контекста
    "SLF",  # flake8-self | Проверяет доступ к «частным» членам класса
    "TCH",  # flake8-type-checking | Подсказки по тайпчекингу
    "TD",   # flake8-todos | Правила, правильного написания TODO
    "T20",  # flake8-print | Выявления случаев, использование отладчика в продакшен-коде
    "UP",   # pyupgrade | Новых функций языка и замену устаревших конструкций на более эффективные и безопасные аналоги
    "W",    # pycodestyle warnings |
]
# Исключаем директории и файлы из линтинга
exclude = [
    ".venv/*",
    "__pycache__",
    ".vscode/*",
    ".git",
    "alembic/*",
    "**/tests/*",
]

# Игнорируем конкретные предупреждения линтера
ignore = [
    "ANN101", # Бесполезная проверка аннотации self в методах класса (это правило устарело и будет удалено в будущем выпуске)
    "ANN102", # Бесполезная проверка аннотации cls в методах класса (это правило устарело и будет удалено в будущем выпуске)
    "B008", # Игнорирование предупреждения от flake8-bugbear, который указывает на проблему использования вызовов любых "вызываемых" объектов в качестве значений аргументов по умолчанию
    "PLR0904", # Максимальное количество методов класса
    "PLR0913", # Максимальное количество аргументов, допустимое для определения функции или метода
    "PLR0917", # Максимальное количество позиционных аргументов, допустимое для определения функции или метода
    "RUF001", # Игнорирование похожих символов с разными ASCII
    "RUF002", # Игнорирование похожих символов с разными ASCII
    "RUF003", # Игнорирование похожих символов с разными ASCII
]

# Ошибки, которые могут исправлены автоматически
fixable = [
    "COM",
    "I",
]

# Список кодов правил или префиксов, для которых безопасные исправления следует считать небезопасными
extend-unsafe-fixes = [
    #"F401", # Игнорирование неиспользуемых импортов
]

# Расширенное игнорирование для отдельных файлов
[lint.extend-per-file-ignores]
"__init__.py" = [
    "E402",
    "F401", # Игнорирование ошибок импорта
]
"**/schemas/**/*.py" = [
    "PIE790",  # В схемах использовать Ellipsis в непустых классах, что повышает читаемость
]


[format]
# Устанавливаем предпочтительный стиль кавычек
quote-style = "double" # 'single' для одинарных, "double" для двойных кавычек

[lint.mccabe]
# Устанавливаем максимально допустимую сложность функций и методов
max-complexity = 15

[lint.isort]
# Сортировка импортов с учетом регистра - под вопросом
case-sensitive = true